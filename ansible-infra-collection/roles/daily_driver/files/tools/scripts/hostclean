#!/usr/bin/env python3
from __future__ import annotations
from pathlib import Path
import sys
from typing import NamedTuple, NewType


def get_target_file():
    try:
        return sys.argv[1]
    except IndexError:
        return "/etc/hosts"


class Verbatim(NamedTuple):
    text: str

    def __str__(self):
        return self.text


IPAddr = NewType("IPAddr", str)
Hostname = NewType("Hostname", str)


class Entry(NamedTuple):
    ip: IPAddr
    hosts: tuple[Hostname]
    comment: str

    @classmethod
    def from_line(cls, line: str):
        # assumed to already be determined to be the correct type of line
        ip, _, rest = line.partition(" ")
        hosts, _, comment = rest.partition("#")

        return cls(IPAddr(ip), tuple(Hostname(host) for host in hosts.split()), comment)

    def filter_crc(self) -> Entry:
        new_hosts = (host for host in self.hosts if not host.endswith("crc.testing"))
        return self._replace(hosts=tuple(new_hosts))

    def __str__(self):
        if not self.comment:
            return f"{self.ip} {' '.join(self.hosts)}"
        else:
            return f"{self.ip} {' '.join(self.hosts)} #{self.comment}"


def parse(file: str):
    # this means the read is atomic, so we don't need to worry about breaking the file in a pipeline.
    contents = Path(file).read_text()
    for line in contents.splitlines():
        stripped = line.lstrip()
        if line and line[0] != "#":
            yield Entry.from_line(stripped)
        else:
            yield Verbatim(line)


for entry in parse(get_target_file()):
    if isinstance(entry, Entry):
        print(entry.filter_crc())
    else:
        print(entry)
